path = "~/Desktop/TCGA-LAML/miRNAs.csv"
meta_path = "~/Desktop/TCGA-LAML/miRNAs.csv"
meta_path = "~/Desktop/TCGA-LAML/metadata.csv"
#Read DF
raw_count = read.csv(path, check.names = F, header = TRUE, row.names = 1)
metadata = read.csv(meta_path, check.names = F, header = TRUE, row.names = 1)
View(metadata)
##Intersect
lSample = intersect(rownames(metadata), colnames(raw_count))
#Filter by Sample
raw_count = raw_count[lSample]
metadata = metadata[metadata$sample %in% lSample,]
metadata = read.csv(meta_path, check.names = F, header = TRUE, row.names = 1)
##Intersect
lSample = intersect(rownames(metadata), colnames(raw_count))
#Filter by Sample
raw_count = raw_count[lSample]
metadata = metadata[lSample,]
print(head(raw_count))
##Create DGEList
dgList = DGEList(counts = raw_count,
genes = rownames(raw_count))
pacman::p_load(edgeR,dplyr)
##Create DGEList
dgList = DGEList(counts = raw_count,
genes = rownames(raw_count))
raw_count < 0
table(raw_count < 0)
drop <- which(apply(cpm(raw_count), 1, max) < 1)
estimateDisp(raw_count, design, robust = TRUE)
design <- model.matrix(~metadata[group])
group = event
group = "event"
design <- model.matrix(~metadata[group])
metadata[group]
design <- model.matrix(~as.vector(metadata[group]))
design <- model.matrix(~str(metadata[group]))
model.matrix(~metadata$event)
model.matrix(~metadata$event)
as.formula(metadata$group)
as.formula(sprintf("metadata$%s",group))
as.formula(sprintf("y = metadata$%s",group))
as.formula(sprintf("metadata$%s",group))
model.matrix(~metadata$event)
model.matrix(~metadata)
model.matrix(~event, data = metadata)
model.matrix(~event, data = metadata)
as.formula("~event")
design <- model.matrix(as.formula(sprintf("~%s", group)), data = metadata)
estimateDisp(raw_count, design, robust = TRUE)
fit <- glmQLFit(raw_count, design)
exactTest(raw_count)
limma::lmFit(raw_count,design)
tt = genefilter::rowttests(raw_count,metadata[group])
#Obtenemos los p_valores, también los ajustados
p_val = tt$p.value
p_BH=p.adjust(p_val,method = "BH")
p_Bonferroni=p.adjust(p_val, method = "bonferroni")
table(p_BH<0.001,p_Bonferroni<0.001)
install.packages("genefilter")
BiocManager::install("genefilter")
tt = genefilter::rowttests(raw_count,metadata[group])
#Obtenemos los p_valores, también los ajustados
p_val = tt$p.value
p_BH=p.adjust(p_val,method = "BH")
p_Bonferroni=p.adjust(p_val, method = "bonferroni")
table(p_BH<0.001,p_Bonferroni<0.001)
View(design)
design <- model.matrix(as.formula(sprintf("~0 + %s", group)), data = metadata)
design <- model.matrix(as.formula(sprintf("~0 + %s", group)), data = metadata)
fit = limma::lmFit(raw_count, design)
it2 = contrasts.fit(fit)
it2 = contrasts.fit(fit, design)
